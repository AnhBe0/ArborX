diff --git a/core/cmake/kokkos-config.cmake.in b/core/cmake/kokkos-config.cmake.in
new file mode 100644
index 00000000..bfa1657d
--- /dev/null
+++ b/core/cmake/kokkos-config.cmake.in
@@ -0,0 +1,92 @@
+set(KOKKOS_INSTALL_PREFIX @KOKKOS_INSTALL_PREFIX@)
+set(KOKKOS_LINK_LIBS -lkokkos @KOKKOS_EXTRA_LIBS_LIST@)
+set(KOKKOS_COMPILE_OPTIONS @KOKKOS_CXXFLAGS@)
+set(KOKKOS_LINK_OPTIONS @KOKKOS_LINK_FLAGS@)
+set(KOKKOS_DEVICES @KOKKOS_DEVICES@)
+set(KOKKOS_ARCH @KOKKOS_ARCH@)
+set(KOKKOS_CXX_STANDARD @KOKKOS_CXX_STANDARD@)
+
+# Replace comma separators with semicolons
+foreach(_var KOKKOS_DEVICES KOKKOS_ARCH)
+  string(REPLACE "," ";" ${_var} "${${_var}}")
+  if(Kokkos_DEBUG)
+    message("${_var} = \"${${_var}}\"")
+  endif()
+endforeach()
+
+# Find out what C++ standard to use
+if(KOKKOS_CXX_STANDARD STREQUAL c++11)
+  set(KOKKOS_COMPILE_FEATURES cxx_std_11)
+elseif(KOKKOS_CXX_STANDARD STREQUAL c++14)
+  set(KOKKOS_COMPILE_FEATURES cxx_std_14)
+elseif(KOKKOS_CXX_STANDARD STREQUAL c++17)
+  set(KOKKOS_COMPILE_FEATURES cxx_std_17)
+else()
+  message(WARNING "kokkos cxx standard not supported")
+endif()
+
+# Remove flag that set the C++ standard from the compile options
+set(_COMPILE_OPTIONS)
+foreach(_opt ${KOKKOS_COMPILE_OPTIONS})
+  if(_opt MATCHES "c\\+\\+")
+    if(Kokkos_DEBUG)
+      message("Removing \"${_opt}\" flag from kokkos compile options")
+    endif()
+  else()
+    list(APPEND _COMPILE_OPTIONS ${_opt})
+  endif()
+endforeach()
+set(KOKKOS_COMPILE_OPTIONS ${_COMPILE_OPTIONS})
+unset(_COMPILE_OPTIONS)
+
+# Find the headers and library
+find_path(KOKKOS_INCLUDE_DIR Kokkos_Core.hpp PATHS ${KOKKOS_INSTALL_PREFIX}/include NO_DEFAULT_PATH)
+find_library(KOKKOS_LIBRARY NAMES kokkos PATHS ${KOKKOS_INSTALL_PREFIX}/lib NO_DEFAULT_PATH)
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(KOKKOS DEFAULT_MSG KOKKOS_INCLUDE_DIR KOKKOS_LIBRARY)
+get_filename_component(KOKKOS_LIBRARY_DIR ${KOKKOS_LIBRARY} DIRECTORY)
+
+# Setup the target
+add_library(Kokkos::kokkos INTERFACE IMPORTED)
+set_target_properties(Kokkos::kokkos PROPERTIES
+  INTERFACE_INCLUDE_DIRECTORIES "${KOKKOS_INCLUDE_DIR}"
+  INTERFACE_LINK_LIBRARIES "${KOKKOS_LINK_LIBS}"
+  INTERFACE_LINK_DIRECTORIES "${KOKKOS_LIBRARY_DIR}"
+  INTERFACE_COMPILE_OPTIONS "${KOKKOS_COMPILE_OPTIONS}"
+  INTERFACE_LINK_OPTIONS "${KOKKOS_LINK_OPTIONS}"
+  #INTERFACE_COMPILE_FEATURES "${KOKKOS_COMPILE_FEATURES}"
+)
+
+#   This function makes sure that kokkos was built with the requested backends
+#   and target architectures and generates a fatal error if it was not.
+#
+#   kokkos_check_requested(
+#     [DEVICES <devices>...] # Set of backends (e.g. "OpenMP" and/or "Cuda")
+#     [ARCH <archs>...]      # Target architectures (e.g. "Power9" and/or "Volta70")
+#   )
+function(kokkos_check_requested)
+  cmake_parse_arguments(_KOKKOS_REQUESTED "" "" "DEVICES;ARCH" ${ARGN})
+  set(_KOKKOS_REQUESTED_ARGS)
+  foreach(_X DEVICES ARCH)
+    if(_KOKKOS_REQUESTED_${_X})
+      list(APPEND _KOKKOS_REQUESTED_ARGS ${_X})
+    endif()
+  endforeach()
+  set(_KOKKOS_CHECK_REQUESTED_SUCCESS TRUE)
+  foreach(_X ${_KOKKOS_REQUESTED_ARGS})
+    foreach(_requested ${_KOKKOS_REQUESTED_${_X}})
+      foreach(_provided ${KOKKOS_${_X}})
+        if(_requested STREQUAL _provided)
+          string(REPLACE ";" " " ${_requested} "${_KOKKOS_REQUESTED_${_X}}")
+        endif()
+      endforeach()
+    endforeach()
+    find_package_handle_standard_args("KOKKOS_${_X}" DEFAULT_MSG ${_KOKKOS_REQUESTED_${_X}})
+    if(NOT KOKKOS_${_X}_FOUND)
+      set(_KOKKOS_CHECK_REQUESTED_SUCCESS FALSE)
+    endif()
+  endforeach()
+  if(NOT _KOKKOS_CHECK_REQUESTED_SUCCESS)
+    message(FATAL_ERROR "Kokkos does NOT provide all backends and/or architectures requested")
+  endif()
+endfunction()
diff --git a/core/src/Makefile b/core/src/Makefile
index c2dbddf4..8ed3658f 100644
--- a/core/src/Makefile
+++ b/core/src/Makefile
@@ -73,6 +73,7 @@ mkdir:
	mkdir -p $(PREFIX)/include
	mkdir -p $(PREFIX)/lib
	mkdir -p $(PREFIX)/lib/pkgconfig
+	mkdir -p $(PREFIX)/lib/cmake/kokkos
	mkdir -p $(PREFIX)/include/impl

 copy-cuda: mkdir
@@ -102,6 +103,7 @@ install: mkdir $(CONDITIONAL_COPIES) build-lib generate_build_settings
	$(CP) $(COPY_FLAG) $(KOKKOS_MAKEFILE)  $(PREFIX)
	$(CP) $(COPY_FLAG) $(KOKKOS_CMAKEFILE)  $(PREFIX)
	$(CP) $(COPY_FLAG) $(KOKKOS_PKGCONFIG)  $(PREFIX)/lib/pkgconfig
+	$(CP) $(COPY_FLAG) $(KOKKOS_CMAKECONFIG)  $(PREFIX)/lib/cmake/kokkos
	$(CP) $(COPY_FLAG) libkokkos.a $(PREFIX)/lib
	$(CP) $(COPY_FLAG) $(KOKKOS_CONFIG_HEADER) $(PREFIX)/include

diff --git a/core/src/Makefile.generate_build_files b/core/src/Makefile.generate_build_files
index cc856ee9..26e1921e 100644
--- a/core/src/Makefile.generate_build_files
+++ b/core/src/Makefile.generate_build_files
@@ -6,6 +6,7 @@
 KOKKOS_MAKEFILE=Makefile.kokkos
 KOKKOS_CMAKEFILE=kokkos_generated_settings.cmake
 KOKKOS_PKGCONFIG=kokkos.pc
+KOKKOS_CMAKECONFIG=kokkos-config.cmake

 ifeq ($(KOKKOS_DEBUG),"no")
   KOKKOS_DEBUG_CMAKE = OFF
@@ -50,13 +51,23 @@ $(KOKKOS_PKGCONFIG): $(KOKKOS_PATH)/core/src/$(KOKKOS_PKGCONFIG).in
	    -e 's|@KOKKOS_LINK_FLAGS@|$(KOKKOS_LINK_FLAGS)|g' \
	     $< > $@

+$(KOKKOS_CMAKECONFIG): $(KOKKOS_PATH)/core/cmake/$(KOKKOS_CMAKECONFIG).in
+	@sed -e 's|@KOKKOS_INSTALL_PREFIX@|$(PREFIX)|g' \
+	    -e 's|@KOKKOS_CXXFLAGS@|$(patsubst -I%,,$(KOKKOS_CXXFLAGS))|g' \
+	    -e 's|@KOKKOS_EXTRA_LIBS_LIST@|$(KOKKOS_EXTRA_LIBS)|g' \
+	    -e 's|@KOKKOS_LINK_FLAGS@|$(KOKKOS_LINK_FLAGS)|g' \
+	    -e 's|@KOKKOS_DEVICES@|$(KOKKOS_DEVICES)|g' \
+	    -e 's|@KOKKOS_ARCH@|$(KOKKOS_ARCH)|g' \
+	    -e 's|@KOKKOS_CXX_STANDARD@|$(KOKKOS_CXX_STANDARD)|g' \
+	     $< > $@
+
 kokkos_fixup_sed = $(call kokkos_fixup_sed_impl,$(KOKKOS_MAKEFILE)); $(call kokkos_fixup_sed_impl,$(KOKKOS_CMAKEFILE))

 #This function should be used for variables whose values are different in GNU Make versus CMake,
 #especially lists which are delimited by commas in one case and semicolons in another
 kokkos_append_gmakevar = $(call kokkos_appendvar_makefile,$1); $(call kokkos_append_gmakevar_cmakefile,$1,$2)

-generate_build_settings: $(KOKKOS_CONFIG_HEADER) $(KOKKOS_PKGCONFIG)
+generate_build_settings: $(KOKKOS_CONFIG_HEADER) $(KOKKOS_PKGCONFIG) $(KOKKOS_CMAKECONFIG)
	@rm -f $(KOKKOS_MAKEFILE)
	@rm -f $(KOKKOS_CMAKEFILE)
	@$(call kokkos_append_string, "#Global Settings used to generate this library")
